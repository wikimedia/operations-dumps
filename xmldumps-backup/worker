#!/bin/bash

usage() {
    echo "$0: Unknown option $1"
    echo "Usage: $0 [--configfile filename] [--log] [--maxfails num] [--basedir dir] [--wiki wikiname]"
    echo "          [--cutoff date] [--date date] [--job job] [--skipjobs joblist] [--skipdone]"
    echo "          [--exclusive] [--onepass] [--sleep]"
    echo "--configfile   use specified file for config file (default: wikidump.conf)"
    echo "--log          write log of (almost) everything written to stderr (default: no logging)"
    echo "--maxfails     if more than this many dumps fail in a row, exit (default: 3)"
    echo "--basedir      scripts and files are relative to this dir (default: location of this script)"
    echo "--cutoff       dump wikis until all have a dump produced  as recent as the specified cutoff,"
    echo "               then exit.  format: yyyymmdd  OR  'today'"
    echo "--date         (re)do dump runs of specified date (yyyymmdd) OR 'last'"
    echo "--skipdone     skip any dump jobs that ran successfully (this makes sense only for reruns)"
    echo "--job          do only the specified job for wiki(s)"
    echo "--skipjobs     comma separated list of jobs not to run on the wiki(s)"
    echo "--exclusive    lock the wiki so other runners can't operate on it at the same time"
    echo "               default is true for all runs except those where --job is specified"
    echo "--wiki         name of specific wiki db to dump; otherwise all wikis in list referenced by"
    echo "               config file will be dumped"
    echo "--onepass      if there are no wikis to dump (--skipdone option) then exit"
    echo "--sleep        time to sleep between jobs, default 30 seconds"
    echo
    echo "If the file maintenance.txt is present, no more jobs will be run, and"
    echo "this script will check the status again in 5 minutes."
    echo "If the file exit.txt is present, no more new jobs will be started and"
    echo "this script will terminate."
    exit 1
}

set_defaults() {
    # default number of failures of worker.py in a row before we decide
    # something serious is broken and we refuse to run
    MAXFAILS=3
    # default: don't pass special config file
    CONFIGFILE=""
    # default: no logging to file
    LOG=""
    # default: no cutoff date
    CUTOFF=""
    # default: no date specified
    DATE=""
    # default: run all jobs, not just failed ones
    SKIPDONE=""
    # default: run all jobs
    JOB=""
    # default: run all jobs
    SKIPJOBS=""
    # default for one job: no locking
    EXCLUSIVE=""
    # if no wikis are left to run, exit
    ONEPASS=""
    # time to sleep between wikis, in seconds
    SLEEP=30
}

process_opts() {
    while [ $# -gt 0 ]; do
	if [ $1 == "--configfile" ]; then
	    CONFIGFILE="$2"
	    shift; shift
	elif [ $1 == "--maxfails" ]; then
	    MAXFAILS="$2"
	    shift; shift
	elif [ $1 == "--basedir" ]; then
	    WIKIDUMP_BASE="$2"
	    shift; shift
	elif [ $1 == "--log" ]; then
	    LOG=true
	    shift;
	elif [ $1 == "--cutoff" ]; then
	    CUTOFF="$2"
	    shift; shift
	elif [ $1 == "--wiki" ]; then
	    WIKI="$2"
	    shift; shift
	elif [ $1 == "--date" ]; then
	    DATE="$2"
	    shift; shift
	elif [ $1 == "--job" ]; then
	    JOB="$2"
	    shift; shift
	elif [ $1 == "--skipjobs" ]; then
	    SKIPJOBS="$2"
	    shift; shift
	elif [ $1 == "--sleep" ]; then
	    SLEEP="$2"
	    shift; shift
	elif [ $1 == "--onepass" ]; then
	    ONEPASS=true
	    shift
	elif [ $1 == "--skipdone" ]; then
	    SKIPDONE=true
	    shift
	elif [ $1 == "--exclusive" ]; then
	    EXCLUSIVE=true
	    shift
	else
	    usage
	fi
    done
}

setup_python_args() {
    # set up the command
    pythonargs=( "$WIKIDUMP_BASE/worker.py" )
    if [ ! -z "$CONFIGFILE" ]; then
	pythonargs=( "${pythonargs[@]}" "--configfile" "$CONFIGFILE" )
    fi
    if [ ! -z "$LOG" ]; then
	pythonargs=( "${pythonargs[@]}" "--log" )
    fi
    if [ ! -z "$JOB" ]; then
	pythonargs=( "${pythonargs[@]}" "--job" "$JOB" )
    fi
    if [ ! -z "$SKIPJOBS" ]; then
	pythonargs=( "${pythonargs[@]}" "--skipjobs" "$SKIPJOBS" )
    fi
    if [ ! -z "$SKIPDONE" ]; then
	pythonargs=( "${pythonargs[@]}" "--skipdone" )
    fi
    if [ ! -z "$EXCLUSIVE" ]; then
	pythonargs=( "${pythonargs[@]}" "--exclusive" )
    fi
    if [ ! -z "$DATE" ]; then
	if [ "$DATE" == "today" ]; then
	    # convert this to yyyymmdd, UTC always
	    DATE=`date -u +"%Y%m%d"`
	else
            if [ "$DATE" != "last" ]; then
                # sanity check of arg
	        result=`date -d "$DATE"`
	        if [ -z "$result" ]; then
		    echo "bad date given for 'date' arg"
		    exit 1
                fi
	    fi
	fi
	pythonargs=( "${pythonargs[@]}" "--date" "$DATE" )
    fi
    if [ ! -z "$CUTOFF" ]; then
	if [ "$CUTOFF" == "today" ]; then
	    # convert this to yyyymmdd, UTC always
	    CUTOFF=`date -u +"%Y%m%d"`
	else
	    # sanity check of arg
	    result=`date -d "$CUTOFF"`
	    if [ -z "$result" ]; then
		echo "bad date given for cutoff arg"
		exit 1
	    fi
	fi
	pythonargs=( "${pythonargs[@]}" "--cutoff" "$CUTOFF" )
    fi
    if [ ! -z "$WIKI" ]; then
	pythonargs=( "${pythonargs[@]}" "$WIKI" )
    fi
}

dump_wiki() {
    echo python ${pythonargs[@]}
    python ${pythonargs[@]}
    result=$?
    if [ $result -eq 255 ]; then
	if [ ! -z "$ONEPASS" -o  ! -z "$CUTOFF" ]; then
            # this isn't a failure but rather 'no wikis available to run'
            exit 0
	fi
    fi
    if [ $result -ne 0 ]; then
	failures=$(($failures+1))
	if [ $failures -gt $MAXFAILS ]; then
	    echo "more than $MAXFAILS failures in a row, halting."
	    exit 1
	fi
    else
	failures=0
    fi
    if [ ! -z "$WIKI" ]; then
	# we ran for a specific wiki, we don't loop even if it failed.
	if [ $failures -gt 0 ]; then
	    echo "Dump of wiki $WIKI failed."
	    exit 1
	else
	    echo "Dump of wiki $WIKI succeeded."
	    exit 0
	fi
    fi
    echo "sleeping"
    sleep "$SLEEP"
}

main_loop() {
    if [ -e "$WIKIDUMP_BASE/maintenance.txt" ]; then
	echo "in maintenance mode (see 'maintenance.txt'), sleeping 5 minutes"
	sleep 300
    elif [ -e "$WIKIDUMP_BASE/exit.txt" ]; then
	echo "exit requested, remove 'exit.txt' to continue normal operations."
	exit 0
    else
	dump_wiki
    fi
}

failures=0
WIKIDUMP_BASE=`dirname "$0"`
set_defaults
process_opts "$@"
setup_python_args

while true; do
    main_loop
done
