#!/bin/bash

# default number of failures of worker.py in a row before we decide
# something serious is broken and we refuse to run
MAXFAILS=3
# default: don't pass special config file
CONFIGFILE=""
# default: no logging to file
LOG=""

failures=0
WIKIDUMP_BASE=`dirname "$0"`

while [ $# -gt 0 ]; do
    if [ $1 == "--configfile" ]; then
	CONFIGFILE="$2"
	shift; shift
    elif [ $1 == "--maxfails" ]; then
	MAXFAILS="$2"
	shift; shift
    elif [ $1 == "--basedir" ]; then
	WIKIDUMP_BASE="$2"
	shift; shift
    elif [ $1 == "--log" ]; then
	LOG=true
	shift;
    elif [ $1 == "--wiki" ]; then
	WIKI="$2"
	shift; shift
    else
	echo "$0: Unknown option $1"
	echo "Usage: $0 [--configfile filename] [--log] [--maxfails num] [--basedir dir] [--wiki wikiname]"
	echo "--configfile   use specified file for config file (default: wikidump.conf)"
	echo "--log          write log of (almost) everything written to stderr (default: no logging)"
	echo "--maxfails     if more than this many dumps fail in a row, exit (default: 3)"
	echo "--basedir      scripts and files are relative to this dir (default: location of this script)"
	echo "--wiki         name of specific wiki db to dump; otherwise all wikis in list referenced by"
	echo "               config file will be dumped"
	echo 
	echo "If the file maintenance.txt is present, no more jobs will be run, and"
	echo "this script will check the status again in 5 minutes."
	echo "If the file exit.txt is present, no more new jobs will be started and"
	echo "this script will terminate."
	exit 1
    fi
done

# set up the command
pythonargs=( "$WIKIDUMP_BASE/worker.py" )
if [ ! -z "$CONFIGFILE" ]; then
    pythonargs=( "${pythonargs[@]}" "--configfile" "$CONFIGFILE" )
fi
if [ ! -z "$LOG" ]; then
    pythonargs=( "${pythonargs[@]}" "--log" )
fi
if [ ! -z "$WIKI" ]; then
    pythonargs=( "${pythonargs[@]}" "$WIKI" )
fi

while true; do
    if [ -e "$WIKIDUMP_BASE/maintenance.txt" ]; then
	echo "in maintenance mode (see 'maintenance.txt'), sleeping 5 minutes"
	sleep 300
    elif [ -e "$WIKIDUMP_BASE/exit.txt" ]; then
	echo "exit requested, remove 'exit.txt' to continue normal operations."
	exit 0
    else
	echo python ${pythonargs[@]}
	python ${pythonargs[@]}
	if [ $? -ne 0 ]; then
	    failures=$(($failures+1))
	    if [ $failures -gt $MAXFAILS ]; then
		echo "more than $MAXFAILS failures in a row, halting."
		exit 1
	    fi
	else
	    failures=0
	fi
	if [ ! -z "$WIKI" ]; then
	    # we ran for a specific wiki, we don't loop even if it failed.
	    if [ $failures -gt 0 ]; then
		echo "Dump of wiki $WIKI failed."
		exit 1
	    else
		echo "Dump of wiki $WIKI succeeded."
		exit 0
	    fi
	fi
	echo "sleeping"
	sleep 30
    fi
done
